---
import { Calendar, Clock, Tag } from 'lucide-astro';
import type { CollectionEntry } from 'astro:content';

export interface Props {
  post: CollectionEntry<'blog'>;
}

const { post } = Astro.props;
const { title, description, pubDate, tags } = post.data;

// Calculate reading time (rough estimate: 200 words per minute)
const readingTime = Math.max(1, Math.ceil(post.body.split(/\s+/).length / 200));

// Format date
const formattedDate = new Date(pubDate).toLocaleDateString('en-US', {
  year: 'numeric',
  month: 'long',
  day: 'numeric',
});
---

<article class="card overflow-hidden hover:shadow-xl transition-shadow h-full flex flex-col">
  <div class="p-6 flex flex-col flex-grow">
    <div class="flex items-center gap-4 text-sm text-gray-600 dark:text-gray-400 mb-3">
      <div class="flex items-center gap-1">
        <Calendar class="h-4 w-4" />
        <time datetime={pubDate.toISOString()}>{formattedDate}</time>
      </div>
      <div class="flex items-center gap-1">
        <Clock class="h-4 w-4" />
        <span>{readingTime} min read</span>
      </div>
    </div>
    
    <h3 class="text-xl font-bold mb-2 line-clamp-2">{title}</h3>
    <p class="text-gray-600 dark:text-gray-400 mb-4 line-clamp-3 flex-grow">
      {description}
    </p>
    
    {tags.length > 0 && (
      <div class="flex items-center gap-2 mb-4">
        <Tag class="h-4 w-4 text-gray-500" />
        <div class="flex flex-wrap gap-2">
          {tags.slice(0, 3).map((tag) => (
            <span class="text-xs px-2 py-1 bg-gray-100 dark:bg-gray-800 rounded">
              {tag}
            </span>
          ))}
        </div>
      </div>
    )}
    
    <a
      href={`/blog/${post.slug}`}
      class="text-sm font-medium text-blue-600 dark:text-blue-400 hover:underline inline-flex items-center gap-1 mt-auto"
    >
      Read article â†’
    </a>
  </div>
</article>